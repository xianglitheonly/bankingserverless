---
AWSTemplateFormatVersion: "2010-09-09"
Description: This is a banking app using S3, Lambda and API Gateway - Serverless
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "S3 Bucket Name and IAM Role"
        Parameters: 
          - BucketNameParameter
          - LambdaRoleNameParameter
      - 
        Label: 
          default: "Lambda Parameters"
        Parameters: 
          - LambdaRuntimeParameter
      - 
        Label: 
          default: "API Gateway"
        Parameters: 
          - RESTAPINameParameter
          - APIStageParameter

Parameters:
  BucketNameParameter:
    Type: String
    Description: Enter the name of S3 bucket

  LambdaRoleNameParameter:
    Type: String
    Description: Enter the name of Lambda IAM Role

  LambdaRuntimeParameter:
    Type: String
    Default: python3.9
    AllowedValues:
      - python3.9
      - python3.8
      - python3.7
    Description: Enter the Lambda Runtime

  RESTAPINameParameter:
    Type: String
    Description: Enter the name of REST API

  APIStageParameter:
    Type: String
    Default: Dev
    AllowedValues:
      - Dev
      - QA
      - Prod
    Description: Enter the value of API Stage

Resources:
  bankingS3bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketNameParameter

  LambdaExceutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAm Role for Lambda to access S3
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: !Ref LambdaRoleNameParameter


  Lambdafunction:
    DependsOn: LambdaExceutionRole
    Type: AWS::Lambda::Function
    Properties:
      Runtime: !Ref LambdaRuntimeParameter
      Role: !GetAtt LambdaExceutionRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          client = boto3.client('s3')

          def lambda_handler(event, context):
              response = client.get_object(
                  Bucket='xiangli-serverless-app',
                  Key='accountBalance.json',
          )
            #convert from streaming data to byte
              data_byte = response['Body'].read()
            # convert from bytes to strings
              data_string = data_byte.decode("UTF-8")
            # convert from json string to dictionary
              data_dict = json.loads(data_string)

              return {
                  'statusCode': 200,
              #    'body': data_dict
                  'body': json.dumps(data_dict),
                  'headers': {'Content-Type': 'application/json'},
              }
      Description: API Gateway Lambda S3 
      Timeout : 60

  bankingRESTAPI:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: !Ref RESTAPINameParameter

  bankingstatusResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt bankingRESTAPI.RootResourceId
      PathPart: balanceStatus01
      RestApiId: !Ref bankingRESTAPI

  bankingstatusMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref bankingRESTAPI
      ResourceId: !Ref bankingstatusResource
      HttpMethod: GET
      MethodResponses :
        - StatusCode : 200
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationResponses: 
          - StatusCode : 200
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:ap-southeast-2:lambda:path/2015-03-31/functions/${Lambdafunction.Arn}/invocations'
          

  APIDeployment:
    DependsOn: bankingstatusMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref bankingRESTAPI
      Description: My deployment to Prod
      StageName: !Ref APIStageParameter

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambdafunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: 159677336069
  

